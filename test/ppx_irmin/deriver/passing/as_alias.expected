type 'a typ = 'a Irmin_type.Type.t
module Trivial :
  sig
    type t[@@deriving irmin]
    include sig val t : t Irmin_type.Type.t end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
  end =
  struct
    type t = int as 'a[@@deriving irmin]
    include struct let t = Irmin_type.Type.int end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
  end 
module Recursive :
  sig
    type 'a tree[@@deriving irmin]
    include
      sig val tree_t : 'a Irmin_type.Type.t -> 'a tree Irmin_type.Type.t end
    [@@ocaml.doc "@inline"][@@merlin.hide ]
  end =
  struct
    type 'a tree =
      [ `Branch of ('tree * int * 'tree)  | `Leaf of 'a ] as 'tree[@@deriving
                                                                    irmin]
    include
      struct
        let tree_t a =
          Irmin_type.Type.mu
            (fun tree ->
               Irmin_type.Type.sealv
                 (Irmin_type.Type.(|~)
                    (Irmin_type.Type.(|~)
                       (Irmin_type.Type.variant "tree"
                          (fun branch ->
                             fun leaf ->
                               function
                               | `Branch x1 -> branch x1
                               | `Leaf x1 -> leaf x1))
                       (Irmin_type.Type.case1 "Branch"
                          (Irmin_type.Type.triple tree Irmin_type.Type.int
                             tree) (fun x1 -> `Branch x1)))
                    (Irmin_type.Type.case1 "Leaf" a (fun x1 -> `Leaf x1))))
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end 
