type t = unit[@@deriving irmin]
include struct let t = Irmin.Type.unit end[@@ocaml.doc "@inline"][@@merlin.hide
                                                                   ]
type t_alias = unit[@@deriving irmin]
include struct let t_alias_t = Irmin.Type.unit end[@@ocaml.doc "@inline"]
[@@merlin.hide ]
module S1 :
  sig
    type nonrec t = t list[@@deriving irmin]
    include sig val t : t Irmin.Type.t end[@@ocaml.doc "@inline"][@@merlin.hide
                                                                   ]
    type nonrec t_alias = t_alias list[@@deriving irmin]
    include sig val t_alias_t : t_alias Irmin.Type.t end[@@ocaml.doc
                                                          "@inline"][@@merlin.hide
                                                                    ]
  end =
  struct
    type nonrec t = t list[@@deriving irmin]
    include struct let t = Irmin.Type.list t end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
    type nonrec t_alias = t_alias list[@@deriving irmin]
    include struct let t_alias_t = Irmin.Type.list t_alias_t end[@@ocaml.doc
                                                                  "@inline"]
    [@@merlin.hide ]
  end 
module S2 :
  sig
    type nonrec t = t list[@@deriving irmin { name = "t_repr" }]
    include sig val t_repr : t Irmin.Type.t end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
    type nonrec t_alias = t_alias list[@@deriving irmin { name = "t_repr" }]
    include sig val t_repr : t_alias Irmin.Type.t end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
  end =
  struct
    type nonrec t = t list[@@deriving irmin { name = "t_repr" }]
    include struct let t_repr = Irmin.Type.list t end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
    type nonrec t_alias = t_alias list[@@deriving irmin { name = "t_repr" }]
    include struct let t_repr = Irmin.Type.list t_alias_t end[@@ocaml.doc
                                                               "@inline"]
    [@@merlin.hide ]
  end 
