type 'a typ = 'a Irmin_type.Type.t
module Id :
  sig
    type 'a t[@@deriving irmin]
    include sig val t : 'a Irmin_type.Type.t -> 'a t Irmin_type.Type.t end
    [@@ocaml.doc "@inline"][@@merlin.hide ]
  end =
  struct
    type 'a t = 'a[@@deriving irmin]
    include struct let t a = a end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end 
let __ : type a. a typ -> a Id.t typ = Id.t
module Phantom :
  sig
    type _ t = int[@@deriving irmin]
    include
      sig
        val t :
          'v_x__001_ Irmin_type.Type.t -> 'v_x__001_ t Irmin_type.Type.t
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end =
  struct
    type _ t = int[@@deriving irmin]
    include struct let t _ = Irmin_type.Type.int end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
  end 
let __ : type a. a typ -> a Phantom.t typ = Phantom.t
module Multiple :
  sig
    type ('a, 'b, 'c) t = {
      foo: 'a ;
      bar: 'b list ;
      baz: ('b * 'c) }[@@deriving irmin]
    include
      sig
        val t :
          'a Irmin_type.Type.t ->
            'b Irmin_type.Type.t ->
              'c Irmin_type.Type.t -> ('a, 'b, 'c) t Irmin_type.Type.t
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end =
  struct
    type ('a, 'b, 'c) t = {
      foo: 'a ;
      bar: 'b list ;
      baz: ('b * 'c) }[@@deriving irmin]
    include
      struct
        let t a b c =
          Irmin_type.Type.sealr
            (Irmin_type.Type.(|+)
               (Irmin_type.Type.(|+)
                  (Irmin_type.Type.(|+)
                     (Irmin_type.Type.record "t"
                        (fun foo -> fun bar -> fun baz -> { foo; bar; baz }))
                     (Irmin_type.Type.field "foo" a (fun t -> t.foo)))
                  (Irmin_type.Type.field "bar" (Irmin_type.Type.list b)
                     (fun t -> t.bar)))
               (Irmin_type.Type.field "baz" (Irmin_type.Type.pair b c)
                  (fun t -> t.baz)))
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end 
let __ : type a b c. a typ -> b typ -> c typ -> (a, b, c) Multiple.t typ =
  Multiple.t
