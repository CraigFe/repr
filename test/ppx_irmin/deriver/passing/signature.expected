module SigTests :
  sig
    type t = string[@@deriving irmin]
    include sig val t : t Irmin_type.Type.t end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
    type foo = unit[@@deriving irmin { name = "foo_repr" }]
    include sig val foo_repr : foo Irmin_type.Type.t end[@@ocaml.doc
                                                          "@inline"][@@merlin.hide
                                                                    ]
    type my_int = (int32 * t)[@@deriving irmin]
    include sig val my_int_t : my_int Irmin_type.Type.t end[@@ocaml.doc
                                                             "@inline"]
    [@@merlin.hide ]
    type my_variant =
      | A of (my_int, int) result 
      | B of unit 
      | C of string * int32 [@@deriving irmin]
    include sig val my_variant_t : my_variant Irmin_type.Type.t end[@@ocaml.doc
                                                                    "@inline"]
    [@@merlin.hide ]
  end =
  struct
    type t = string[@@deriving irmin]
    include struct let t = Irmin_type.Type.string end[@@ocaml.doc "@inline"]
    [@@merlin.hide ]
    type foo = unit[@@deriving irmin { name = "foo_repr" }]
    include struct let foo_repr = Irmin_type.Type.unit end[@@ocaml.doc
                                                            "@inline"]
    [@@merlin.hide ]
    type my_int = (int32 * t)[@@deriving irmin]
    include
      struct let my_int_t = Irmin_type.Type.pair Irmin_type.Type.int32 t end
    [@@ocaml.doc "@inline"][@@merlin.hide ]
    type my_variant =
      | A of (my_int, int) result 
      | B of unit 
      | C of string * int32 [@@deriving irmin]
    include
      struct
        let my_variant_t =
          Irmin_type.Type.sealv
            (Irmin_type.Type.(|~)
               (Irmin_type.Type.(|~)
                  (Irmin_type.Type.(|~)
                     (Irmin_type.Type.variant "my_variant"
                        (fun a ->
                           fun b ->
                             fun c ->
                               function
                               | A x1 -> a x1
                               | B x1 -> b x1
                               | C (x1, x2) -> c (x1, x2)))
                     (Irmin_type.Type.case1 "A"
                        (Irmin_type.Type.result my_int_t Irmin_type.Type.int)
                        (fun x1 -> A x1)))
                  (Irmin_type.Type.case1 "B" Irmin_type.Type.unit
                     (fun x1 -> B x1)))
               (Irmin_type.Type.case1 "C"
                  (Irmin_type.Type.pair Irmin_type.Type.string
                     Irmin_type.Type.int32) (fun (x1, x2) -> C (x1, x2))))
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end 
