type test_list1 = string list[@@deriving repr]
include struct let test_list1_t = Repr.Type.list Repr.Type.string end
[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_list2 = int32 list list list[@@deriving repr]
include
  struct
    let test_list2_t =
      Repr.Type.list (Repr.Type.list (Repr.Type.list Repr.Type.int32))
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_array = bool array[@@deriving repr]
include struct let test_array_t = Repr.Type.array Repr.Type.bool end[@@ocaml.doc
                                                                    "@inline"]
[@@merlin.hide ]
type test_option = unit option[@@deriving repr]
include struct let test_option_t = Repr.Type.option Repr.Type.unit end
[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_pair = (string * int32)[@@deriving repr]
include
  struct
    let test_pair_t = Repr.Type.pair Repr.Type.string Repr.Type.int32
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_triple = (string * int32 * bool)[@@deriving repr]
include
  struct
    let test_triple_t =
      Repr.Type.triple Repr.Type.string Repr.Type.int32 Repr.Type.bool
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_result = (int32, string) result[@@deriving repr]
include
  struct
    let test_result_t = Repr.Type.result Repr.Type.int32 Repr.Type.string
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
let (_ : test_list1 Repr.Type.t) = test_list1_t
let (_ : test_list2 Repr.Type.t) = test_list2_t
let (_ : test_array Repr.Type.t) = test_array_t
let (_ : test_option Repr.Type.t) = test_option_t
let (_ : test_pair Repr.Type.t) = test_pair_t
let (_ : test_triple Repr.Type.t) = test_triple_t
let (_ : test_result Repr.Type.t) = test_result_t
