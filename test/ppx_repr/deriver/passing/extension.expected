type 'a typ = 'a Repr.Type.t
module Simple =
  struct
    let (_ : (int * string) list typ) =
      Repr.Type.list (Repr.Type.pair Repr.Type.int Repr.Type.string)
  end
module Alias =
  struct type t = unit
         let t = Repr.Type.unit
         let (_ : unit typ) = t end
module Sum =
  struct
    let (_ : [ `Foo  | `Bar of string ] typ) =
      Repr.Type.sealv
        (Repr.Type.(|~)
           (Repr.Type.(|~)
              (Repr.Type.variant "t"
                 (fun foo ->
                    fun bar -> function | `Foo -> foo | `Bar x1 -> bar x1))
              (Repr.Type.case0 "Foo" `Foo))
           (Repr.Type.case1 "Bar" Repr.Type.string (fun x1 -> `Bar x1)))
  end
module Params =
  struct
    let __ : type a. a typ -> a list typ = fun a -> Repr.Type.list a
    let __ : type a b. a typ -> b typ -> (a * b * a) typ =
      fun a -> fun _x__001_ -> Repr.Type.triple a _x__001_ a
    let __ : type a b. a typ -> b typ -> (a, b) result typ =
      fun _x__002_ -> fun _x__003_ -> Repr.Type.result _x__002_ _x__003_
  end
module Namespace = struct let (_ : string typ) = Repr.Type.string end
